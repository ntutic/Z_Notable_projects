# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GMQ710Analyser
                                 A QGIS plugin
 GMQ710Analyser
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-12-07
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Yves Voirin
        email                : yves.voirin@usherbrooke.ca
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GMQ710Analyser_dialog import GMQ710AnalyserDialog
import os.path

from .analyser import Analyser

class GMQ710Analyser:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GMQ710Analyser_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GMQ710Analyser')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GMQ710Analyser', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GMQ710Analyser/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GMQ710 Analyser'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GMQ710Analyser'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

            # On initialise la boite de dialogue
            self.dlg = GMQ710AnalyserDialog()

            # On récupère les noms de tous les widgets propres au projet
            self.widgets = [i for i in dir(self.dlg) if not callable(i) and i[:4] == "gmq_"]

            # On va créer l'Analyser
            self.analyser = Analyser()

            # On ajoute les noms des couches de QGIS dans une variable
            layers = self.analyser.getLayersNamesQgis()

            # On récupère les types de rues
            types = self.analyser.getStreetTypes()
            
            # On parcours les widgets pour ajouter les bonnes valeurs aux combobox.
            for widget in self.widgets:
                widget_type = widget.split('_')[1] 
                if widget_type == 'comboBox' and 'Couche' in widget:
                    getattr(self.dlg, widget).clear()
                    getattr(self.dlg, widget).addItems(layers)
                elif widget_type == 'comboBox' and 'Type' in widget:
                    getattr(self.dlg, widget).clear() 
                    getattr(self.dlg, widget).addItems(types)

            # On assigne des valeurs tampons par défaut
            self.dlg.gmq_lineEdit_intBufferAdresses.setText('1000')
            self.dlg.gmq_lineEdit_intBufferItineraire.setText('200')

            # Pour débugger plus facilement sans avoir à entrer manuellement des champs,
            # changer pour "if True:"
            if False:
                self.dlg.gmq_lineEdit_intDepart.setText('3800')
                self.dlg.gmq_lineEdit_strDepart.setText('Bellechasse')
                self.dlg.gmq_lineEdit_intArrive.setText('4200')
                self.dlg.gmq_lineEdit_strArrive.setText('Dumont')

            # On va associer le bouton execute à la fonction execute() 
            self.dlg.pushButton_Execute.clicked.connect(self.execute)

        # show the dialog
        self.dlg.show()


        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            pass
            

    def execute(self):
        '''
        Cette fonction coordonne le traitement des résultats entre la boite de dialogue (self.dlg) et 
        la classe contenant nos méthodes de traitement (self.analyser). Certaines de ces méthodes peuvent
        retourner une erreur, dans quel cas le traitement est annulé et l'erreur affichée. 
        '''

        # On vide la boite de résultats
        self.dlg.gmq_plainTextEdit_strResultats.setPlainText('')

        # On crée un dictionnaire avec les valeurs de l'utilisateurs
        inputs = {}

        for widget in self.widgets:

            # La nomenclature des widgets nous permet d'extraire le type,
            # puis on peut récupérer la valeur du champs selon le type de widget.
            widget_type = widget.split('_')[1] 
            if widget_type == 'lineEdit' and getattr(self.dlg, widget):
                inputs[widget] = getattr(self.dlg, widget).text()
            elif widget_type == 'comboBox' and getattr(self.dlg, widget):
                inputs[widget] = getattr(self.dlg, widget).currentText()
            elif widget_type in ['comboBox', 'lineEdit']:
                inputs[widget] = ''       
            else:
                continue
        
        # On envoie et valide les inputs dans l'analyser 
        errors = self.analyser.sendInputs(inputs)
        
        # Certaines classes peuvent retourner une erreur sous forme de string,
        # on s'en servira pour couper le processus s'il y a lieu et faire sortir
        # le message d'erreur (sans avoir à utiliser la variable dlg dans Analyser)
        if not errors:
            
            # On récupère les couches avec une contraption pour récuperer les inputs se rapportant aux couches 
            self.analyser.getLayersQgis({k:v for (k, v) in inputs.items() if 'comboBox_strCouche' in k})
            
            # On trouve les adresses de nos points de départs et d'arrivées
            errors = self.analyser.getGeocodes()

        # S'il y avait une erreur au block précédant, celle-ci est affichée et les prochains blocs seront sautés.
        else:
            self.dlg.gmq_plainTextEdit_strResultats.setPlainText(errors)
            
        if not errors:

            # On crée nos buffers nécessaires
            self.analyser.getBuffers()

            # On récupère les stations bixis concernés
            errors = self.analyser.getBixiStations()

        else:
            self.dlg.gmq_plainTextEdit_strResultats.setPlainText(errors)

        if not errors:

            # On récupère les points d'intérêts
            self.analyser.getInterestLocations()

            # On créé les couches en mémoire dans QGIS
            self.analyser.getResultLayers()

            # On imprime dans la boîte de dialogue le string de résultats.
            self.dlg.gmq_plainTextEdit_strResultats.setPlainText(self.analyser.results)

        else:
            self.dlg.gmq_plainTextEdit_strResultats.setPlainText(errors)

        



